{
  # the base source of the configuration
  config-source {
    base-source-name = "spikes-core"
  }

  # apache kafka cluster configuration
//  kafka {
//    bootstrap {
//      servers = "beefy:9092"
//    }
//  }

  # application.conf.copy has the original, more complete config -- but that doesn't work, need to add back one piece at
  # a time to see what breaks this.
  # akka configuration
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    # akka extensions
    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension"]

    # scheduler tick-duration
    # see https://doc.akka.io/docs/akka/snapshot/general/configuration.html#akka-actor and search for "scheduler"
//    scheduler {
//      tick-duration = 1ms
//      ticks-per-wheel = 1024
//    }
    scheduler {
      implementation = "com.digitalcipher.spiked.timing.SpikesScheduler"
      tick-duration = 100000ns
      ticks-per-wheel = 1024
    }

    actor {
      #provider = remote
      # -------
      # for testing seriealization
      provider = local
      #serialize-messages = on
      #serialize-creators = on
      # -------

      serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      }

      allow-java-serialization = on

      serialization-bindings {
        "java.io.Serializable" = java
        #"java.lang.Class" = java
        #"java.lang.String" = java
        "java.lang.Class" = kryo

        "com.digitalcipher.spiked.construction.description.NetworkDescription" = kryo

        "com.digitalcipher.spiked.construction.description.GroupDescription" = kryo
        "com.digitalcipher.spiked.construction.description.GroupParams" = kryo
        "com.digitalcipher.spiked.construction.description.RemoteGroupParams" = kryo
        "com.digitalcipher.spiked.construction.description.LocalGroupParams" = kryo

        "com.digitalcipher.spiked.construction.description.NeuronDescription" = kryo
        "com.digitalcipher.spiked.construction.description.LocationDescription" = kryo
        "com.digitalcipher.spiked.construction.description.ConnectionDescription" = kryo
        "com.digitalcipher.spiked.construction.description.LearningFunctionDescription" = kryo

        "com.digitalcipher.spiked.construction.description.LocationDescription" = kryo
        "com.digitalcipher.spiked.construction.description.WeightDecayDescription" = kryo
        "com.digitalcipher.spiked.construction.description.WeightLimitDescription" = kryo

        "com.digitalcipher.spiked.construction.NeuronCreator$CreateNeuron" = kryo
        "com.digitalcipher.spiked.construction.NeuronCreator$CreateNeuronResponse" = kryo
        "com.digitalcipher.spiked.construction.NeuronCreator$CreateNeurons" = kryo
        "com.digitalcipher.spiked.construction.NeuronCreator$CreateNeuronsResponse" = kryo

        "com.digitalcipher.spiked.topology.Network$AddNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$AddNeuronsResponse" = kryo
        "com.digitalcipher.spiked.topology.Network$AddNeuron" = kryo
        "com.digitalcipher.spiked.topology.Network$AddInputNeuron" = kryo
        "com.digitalcipher.spiked.topology.Network$AddHiddenNeuron" = kryo
        "com.digitalcipher.spiked.topology.Network$AddOutputNeuron" = kryo

        "com.digitalcipher.spiked.topology.Network$NeuronConnection" = kryo
        "com.digitalcipher.spiked.topology.Network$ConnectNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$ConnectNeuronsResponse" = kryo

        "com.digitalcipher.spiked.topology.Network$RetrieveNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$RetrieveInputNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$RetrieveHiddenNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$RetrieveOutputNeurons" = kryo
        "com.digitalcipher.spiked.topology.Network$RetrieveNeuronDetails" = kryo


        "squants.motion.Velocity" = kryo
        "squants.time.Time" = kryo
        "squants.space.Length" = kryo
        "squants.electro.ElectricPotential" = kryo
        "squants.time.Frequency" = kryo
        "squants.electro.MagneticFlux" = kryo

        "com.digitalcipher.spiked.neurons.Signal" = kryo
        "com.digitalcipher.spiked.neurons.Neuron$Connect" = kryo
        "com.digitalcipher.spiked.neurons.Neuron$AddConnection" = kryo
        "com.digitalcipher.spiked.neurons.Neuron$Synapse" = kryo
        "com.digitalcipher.spiked.neurons.Neuron$Weight" = kryo
        "com.digitalcipher.spiked.neurons.Neuron$AddPreSynapticRef" = kryo

        "com.digitalcipher.spiked.neurons.SignalReceiver$IdQuery" = kryo

        "com.digitalcipher.spiked.construction.description.LearningFunctionDescription" = kryo
        "com.digitalcipher.spiked.construction.description.StdpHardLimitLearningParams" = kryo
        "com.digitalcipher.spiked.construction.description.NoLearningParams" = kryo

        "com.digitalcipher.spiked.construction.NetworkBuilder" = kryo
        "com.digitalcipher.spiked.construction.NetworkBuilder$NetworkFromDescription" = kryo
//        "com.digitalcipher.spiked.topology.TestMessage" = kryo
//        "com.digitalcipher.spiked.topology.TestMessageWithArg" = kryo
//        "com.digitalcipher.spiked.topology.CreateTestMessage" = kryo
//        "com.digitalcipher.spiked.topology.SerializationTestMessage" = kryo
        "com.digitalcipher.spiked.construction.NeuronCreator$SimulationTimeFactor" = kryo
//        "com.digitalcipher.spiked.construction.NeuronCreator.SimulationTimeFactor" = kryo

        "com.digitalcipher.spiked.construction.description.SignalReleaseProbabilityDescription" = kryo

        "com.digitalcipher.spiked.neurons.Neuron$InitializeTime" = kryo
        "com.digitalcipher.spiked.topology.Network$SimulationStart" = kryo
        "com.digitalcipher.spiked.topology.Network$SimulationStartResponse" = kryo

        "com.digitalcipher.spiked.topology.coords.spatial.Coordinates$Cartesian" = kryo
        "com.digitalcipher.spiked.construction.description.SignalTimingFunction" = kryo

        "scala.Tuple2" = kryo
        "scala.Tuple3" = kryo
        "scala.collection.immutable.Map" = kryo
        "scala.collection.immutable.List" = kryo

        "scala.util.matching.Regex" = kryo

        "akka.actor.ActorRef" = kryo
        "akka.remote.RemoteActorRef" = kryo
        "akka.actor.Props" = kryo

        "akka.event.EventStreamUnsubscriber$Register" = kryo
        "akka.event.EventStreamUnsubscriber$UnregisterIfNoMoreSubscribedChannels" = kryo
      }

      kryo  {
        # Possibles values for type are: graph or nograph
        # graph supports serialization of object graphs with shared nodes
        # and cyclic references, but this comes at the expense of a small
        # overhead nograph does not support object grpahs with shared nodes,
        # but is usually faster
        type = "graph"

        # Possible values for idstrategy are:
        # default, explicit, incremental, automatic
        #
        # default - slowest and produces bigger serialized representation.
        # Contains fully-qualified class names (FQCNs) for each class. Note
        # that selecting this strategy does not work in version 0.3.2, but
        # is available from 0.3.3 onward.
        #
        # explicit - fast and produces compact serialized representation.
        # Requires that all classes that will be serialized are pre-registered
        # using the "mappings" and "classes" sections. To guarantee that both
        # sender and receiver use the same numeric ids for the same classes it
        # is advised to provide exactly the same entries in the "mappings"
        # section.
        #
        # incremental - fast and produces compact serialized representation.
        # Support optional pre-registering of classes using the "mappings"
        # and "classes" sections. If class is not pre-registered, it will be
        # registered dynamically by picking a next available id To guarantee
        # that both sender and receiver use the same numeric ids for the same
        # classes it is advised to pre-register them using at least the "classes" section.
        #
        # automatic -  use the pre-registered classes with fallback to FQCNs
        # Contains fully-qualified class names (FQCNs) for each non pre-registered
        # class in the "mappings" and "classes" sections. This strategy was
        # added in version 0.4.1 and will not work with the previous versions

        #idstrategy = "incremental"
        idstrategy = "explicit" # works
        #idstrategy = "default"
        #idstrategy = "automatic" # works

        # Define a default queue builder, by default ConcurrentLinkedQueue is used.
        # Create your own queue builder by implementing the trait QueueBuilder,
        # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
        #
        # If you pass a bounded queue make sure its capacity is equal or greater than the
        # maximum concurrent remote dispatcher threads your application will ever have
        # running; failing to do this will have a negative performance impact:
        #
        # custom-queue-builder = "a.b.c.KryoQueueBuilder"

        # Define a default size for byte buffers used during serialization
        buffer-size = 4096

        # The serialization byte buffers are doubled as needed until they
        # exceed max-buffer-size and an exception is thrown. Can be -1
        # for no maximum.
        max-buffer-size = -1

        # If set, akka uses manifests to put a class name
        # of the top-level object into each message
        # use-manifests = false
        use-manifests = true

        # If set it will use the UnsafeInput and UnsafeOutput
        # Kyro IO instances. Please note that there is no guarantee
        # for backward/forward compatibility of unsafe serialization.
        # It is also not compatible with the safe-serialized values.
        # The unsafe IO usually creates bugger payloads but is faster
        # for some types, e.g. native arrays.
        use-unsafe = false

        # The transformations that have be done while serialization
        # Supported transformations: compression and encryption
        # accepted values(comma separated if multiple): off | lz4 | deflate | aes
        # Transformations occur in the order they are specified
        #post-serialization-transformations = "lz4,aes"
        post-serialization-transformations = "off"

        # Settings for aes encryption, if included in transformations AES
        # algo mode, key and custom key class can be specified AES algo mode
        # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
        # If custom key class is provided, Kryo will use the class specified
        # by a fully qualified class name to get custom AES key. Such a
        # class should define the method 'kryoAESKey'. This key overrides 'key'.
        # If class doesn't contain 'kryoAESKey' method, specified key is used.
        # If this is not present, default key is used
        # encryption {
        #   aes {
        #     mode = "AES/CBC/PKCS5Padding"
        #     key = j68KkRjq21ykRGAQ
        #     IV-length = 16
        #     custom-key-class = "CustomAESKeyClass"
        #   }
        # }

        # Log implicitly registered classes. Useful, if you want to know all
        # classes which are serialized. You can then use this information in
        # the mappings and/or classes sections
        # implicit-registration-logging = false
        implicit-registration-logging = true

        # If enabled, Kryo logs a lot of information about serialization process.
        # Useful for debugging and lowl-level tweaking
        kryo-trace = false
        #kryo-trace = true

        # If proviced, Kryo uses the class specified by a fully qualified
        # class name to perform a custom initialization of Kryo instances in
        # addition to what is done automatically based on the config file.
        kryo-custom-serializer-init = "com.digitalcipher.spiked.serialization.KryoInitializer"

        # If enabled, allows Kryo to resolve subclasses of registered Types.
        #
        # This is primarily useful when idstrategy is set to "explicit". In this
        # case, all classes to be serialized must be explicitly registered. The
        # problem is that a large number of common Scala and Akka types (such as
        # Map and ActorRef) are actually traits that mask a large number of
        # specialized classes that deal with various situations and optimizations.
        # It isn't straightforward to register all of these, so you can instead
        # register a single supertype, with a serializer that can handle *all* of
        # the subclasses, and the subclasses get serialized with that.
        #
        # Use this with care: you should only rely on this when you are confident
        # that the superclass serializer covers all of the special cases properly.
        #resolve-subclasses = false
        resolve-subclasses = true

        # Define mappings from a fully qualified class name to a numeric id.
        # Smaller ids lead to smaller sizes of serialized representations.
        #
        # This section is:
        # - mandatory for idstrategy="explicit"
        # - ignored   for idstrategy="default"
        # - optional  for incremental and automatic
        #
        # The smallest possible id should start at 20 (or even higher), because
        # ids below it are used by Kryo internally e.g. for built-in Java and
        # Scala types
        mappings {
          "akka.actor.RepointableActorRef" = 81
          "akka.remote.RemoteActorRef" = 82
          "akka.event.EventStreamUnsubscriber$Register" = 83
          "akka.event.EventStreamUnsubscriber$UnregisterIfNoMoreSubscribedChannels" = 84
        }

        # Define a set of fully qualified class names for
        # classes to be used for serialization.
        # The ids for those classes will be assigned automatically,
        # but respecting the order of declaration in this section
        #
        # This section is ignored for idstrategy="default" and optional for
        # all other.
        classes = [
          "akka.actor.RepointableActorRef"
          "akka.remote.RemoteActorRef"
          "akka.event.EventStreamUnsubscriber$Register"
          "akka.event.EventStreamUnsubscriber$UnregisterIfNoMoreSubscribedChannels"
        ]
      }
    }

    remote {
//      artery {
//        enabled = on
//
//        # -------
//        # for testing seriealization
//        # enabled = off
//        # -------
//        canonical.hostname = "192.168.1.153"
//        canonical.port = 2553
//      }
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
//        hostname = "192.168.1.177"
//        hostname = "192.168.1.153"
        hostname = "localhost"
//        port = 2553
      }
    }
  }
}